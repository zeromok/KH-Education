package Java.SingleTon;

public class Sample00 {
    /*
        ==================
        SingleTon(싱글톤)
        ==================
        하나의 애플리케이션 내에서 단 하나만 생성되는 객체
        왜필요하냐? ex) 환경설정의 정보들은 하나의 객체만 저장해도 되기 때문에
        싱글톤 객체 안 필드를 어느객체에서건 공유 즉, 어디에서건 공유될 수 있는 객체
        실무에서도 자주 사용되는 개념
    */


    /*
        =====================
        싱글톤을 만드는 방법
        =====================
        외부에서 new 연산자로 생성자를 호출할 수 없도록 막기
        - Private 접근 제한자를 생성자 앞에 붙임
    */

    // 소프트웨어를 만들다 보면 어떤 클래스의 객체가, 해당 프로세스서 딱 하나만 만들어 있어야 할경우가 있다.
    // ex) 사용자가 내가 만든 앱을 사용하는데 셋팅에서 다크모드를 설정해놓으면 다른페이지로 이동하더라도 이 다크모드가 그대로 유지되어있어야 한다.
    // 어떤페이지에 있든 셋팅을 관리하는 객체는 반드시 같은것을 사용해야한다. -> 이 객체가 하나만 만들어지도록 한다.
    // 객체 각각의 셋팅값들은 공유될 수 없으므로
    // 1. 접근제한자를 private 으로 선언 = 다른객체에서의 생성을 막는다.
    // 2. static 으로 클래스 자기 자신인 타입의 객체를 만든다. ex) private static Settings settings = null;
    // 3. static 으로 만들어진 객체는 메모리에 지정된 공간에 딱 하나만 존재 = 정적공간
    // 4. 정적변수인 settings 가 만들어 졌으니 이제 정적 메소드를 만들자
    // 5. ex) public static Settings getSettings(){
    //          if (settings == null){
    //              settings = new Settings();
    //          }
    //          return settings;
    //       }
    // settings 가 null 로 초기화 되어 있으니 아직 그 상태라면, 즉 다른곳에서 getSettings 메소드를 실행하기 전이라면
    // Settings 객체를 선언해 변수(settings)에 넣어주고 +바로 반환
    // 어디선가 메소드가 실행되어 settings 가 만들어진 상태라면 리턴값으로 그대로 반환해준다.
    // 다른 클래스에서 private  Settings settings = Settings.getSettings();
    // 으로 적어주면 클래스에서 바로 불러낼 수 있다.
    // 정적변수나 메소드를 쓰면되지 왜 싱글톤을 쓸까?
    // 인터페이스 사용이나 등 싱클톤으로 할수있는 것들이 많기 때문에
    // 한번의 객체생성으로 재 사용이 가능하기 때문에 메모리 낭비를 방지할 수있다.
    // 싱글톤으로 생성된 객체는 무조건 한번 생성으로 전역성을 띄기에 다른객체와 공유가 용이 하다.


    /*
        =============
        final 클래스
        =============
        final 이 클래스 이름 앞에 사용되면 "클래스를 상속받을 수 없음"을 지정한다.
    */

    /*
        ============
        final 매소드
        ============
        final 이 메소드 이름 앞에 사용되면 이 "메소드는 더 이상 오버라이딩 할수 없음"을 지정한다.
    */


    /*
        =====================
        final 필드, 상수 정의
        =====================
        final 필드
            : final 을 가장 많이 사용하는 곳은 필드(전역변수)이다.
            : final 을 필드에 사용하면 그 "필드는 더 이상 수정이 불가능"하다는 의미를 갖는다.

        상수
            : static final 객체 마다 가지는 불변의 정적 필드
            : 이름은 전부 대문자로 작성 다른 단어가 결합되면 _으로 연결

     */
}// end class
