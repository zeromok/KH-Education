package Java.Annotation;

public class Sample00 {

    //Annotation (어노테이션)
    /*
        - 프로그램에게 추가적인 정보를 제공해주는 메타데이터
        - 메타데이터 : 데이터를 위한 데이터를 의미하며, 풀어 이야기하면 한 데이터에 대한 설명을 의미하는 데이터
        (자신의 정보를 담고 있는 데이터)
        - 어노테이션으로 인해 데이터의 유효성 검사 등을 쉽게 알 수 있고, 이와 관련한 코드가 깔끔해진다.
        - 어노테이션의 용도는 다양한 목적이 있지만 메타 데이터의 비중이 가장 크다 할 수 있다.
    */
    // 어노테이션의 종류
    // 어노테이션 타입 정의와 적용
    // 어노테이션 적용 대상

    /*
        ========================================
        Clazz 객체의 레퍼런스를 얻는 방법 3가지:
        ========================================
        (1) 타입명.class 속성이용:
        ex) Class clazz = String.class;

        (2) 참조타입명.getClass() 메소드 이용:
        ex) String name="mokk";
        Class clazz = name.getClass();

        (3) Class.forName(FQCN) 메소드 이용:
        ex) Class clazz = Class.forName("java.lang.String");
    */



    /*
        =============
        InterfaceApp
        =============
        현실 세계
        : 부모가 자식에게 물려주는 행위
        : 부모가 자식을 선택해서 물려줌

        객체지향프로그램
        : 자식(하위, 파생)클래스가 부모(상위) 클래스의 멤버를 물려받는 것
        : 자식이 부모를 선택해 물려받음
        : 상속 대상 - 부모의 필드와 메소드
    */


    /*
        =================
        상속 개념의 활용
        =================
        상속의 효과
        : 부모 클래스 재사용해 자식 클래스 빨리 개발 가능
        : 반복된 커드 중복 줄임
        : 유지 보수 편리성 제공
        : 객체 다형성 구현 가능

        상속 대상 제한
        : 부모 클래스의 private 접근 갖는 필드와 메소드 제외
        : 부모 클래스가 다른 패키지에 있을 경우, default 접근 갖는 필드와 메소드도 제외
    */

    /*
        ==============
        Extends 키워드
        ==============
        자식 클래스가 상속할 부모 클래스를 지정하는 키워드
    */

    /*
        ============================================
        자식 객체 생성하면 부모 객체도 생성되는가 ?
        ============================================
        부모 없는 자식 없음
        - 자식 객체 생성할 때는 부모 객체부터 생성 후 자식 객체 생성
        - 부모 생성자 호출 완료 후 자식 생성자 호출 완료
    */

    /*
        =========================
        명시적인 부모 생성자 호출
        =========================
        - 부모 객체 생성할 때, 부모 생성자 선택해 호출
        - super(매개값...) : 매개값과 동일한 타입, 개수, 순서 맞는 부모 생성자 호출
        - 부모 생성자 없다면 컴파일 오류 발생
        - 반드시 자식 생성자의 첫 줄에 위치
        - 부모 클래스에 기본(매개변수없는) 생성자가 없다면 필수 작성
    */

}// end class
