package Java.src.main.java.Class;

public class Sample00 {
    // 클래스의 모든 구성 멤버 선언시, 'static' 이란 키워드가 있느냐/없느냐 에 따라
    // 인스턴스멤버('static' 없음)와 정적멤버('static' 있음)로 나뉨

    // 클래스, 객체, 인스턴스의 관계
    /*
    ======
    클래스
    ======
    1. 개념
        - 객체를 만들어 내기 위한 설계도 혹은 틀
        - 연관되어 있는 변수와 메소드의 집합

    =====
    객체
    =====
    1. 개념
        - 소프트웨어 세계에 구현할 대상
        - 클래스에 선언된 모양 그대로 생성된 실체
    2. 특징
        - 클래스의 "인스턴스"라고도 부른다.
        - 객체는 모든 인스턴스를 대표하는 포괄적인 의미를 갖는다.
        - OOP 관점에서 클래스의 타입으로 선언되었을 때 "객체"라고 부른다.

    ========
    인스턴스
    ========
    1. 개념
        - 설계도를 바탕으로 소프트웨어 세계에 구현된 구체적인 실체
        - 즉, 객체를 소프트웨어에 실체화 하면 그것을 "인스턴스" 라고 부른다.
        - 실체화된 인스턴스는 메모리(Heap)에 할당된다.
    2. 특징
        - 인스턴스는 객체에 포함된다고 볼 수 있다.
        - OOP 관점에서 객체가 메모리에 할당되어 실제 사용될 때 "인스턴스"라고 부른다.
        - 추상적인 개념과 구체적인 객체 사이의 관계에 초점을 맞출 경우에 사용한다.
        - "~의 인스턴스"의 형태로 사용된다.
        - 객체는 클래스의 인스턴스다.
        - 객체 간의 링크는 클래스 간의 연관 관계의 인스턴스다.
        - 실행 프로세스는 프로그램의 인스턴스다.
        - 즉, 인스턴스라는 용어는 반드시 클래스와 객체 사이의 관계로 한정지어서 사용할 필요는 없다.
        - 인스턴스는 어떤 원본(추상적인 개념)으로부터 "생성된 복제본"을 의미한다.
    */

    // ==============================
    // 클래스, 객체, 인스턴스의 차이
    // ==============================
    /*
    클래스 VS 객체
    - 클래스는 "설계도", 객체는"설계도 바탕으로 구현된 모든 대상"을 의미

    객체 VS 인스턴스
        - 클래스의 타입으로 선언되었을 때 객체라고 부르고, 그 객체가 메모리에 할당되어 실제 사용될 때 인스턴스라고 부른다.
        - 객체는 현실에 가깝고, 인스턴스는 소프트웨어 세계의 가깝다,.
        - 객체는 "실체", 인스턴스는 "관계"에 초첨을 맞춘다.
        - 인스턴스화하여 래퍼런스를 할당한 객체를 인스턴스라고 말하지만, 이는 원본(추상적인 개념)으로 부터 생성되었다는 것에
        - 의미를 부여하는 것일 뿐 엄격하게 객체와 인스턴스를 나누긴 어렵다.
    */

    // ===============================
    // Non-Static 멤버 VS Static 멤버
    // ===============================
    /*
    ================
    Non-Static 멤버
    ================
    1. 공간적 특성
        - 멤버는 객체마다 별도로 존재한다.
        - 인스턴스 멤버라고 부른다.
    2. 시간적 특성
        - 객체 생성 시에 멤버가 생성된다.
        - 객체가 생길 때 멤버도 생성된다.
        - 객체 생성 후 멤버 사용이 가능하다.
        - 객체가 사라지면 멤버도 사라진다.
    3. 공유의 특성
        - 멤버는 객체 내에 각각의 공간을 유지한다.

    ============
    Static 멤버
    ============
    1. 공간적 특성
        - 멤버는 클래스당 하나가 생성된다.
        - 멤버는 객체 내부가 아닌 별도의 공간에 생성된다.
        - 클래스 멤버라고 부른다.
    2. 시간적 특성
        - 클래스 로딩 시에 멤버가 생성된다.
        - 객체가 생기기 전에 이미 생성된다.
        - 객체가 생기기 전에도 사용이 가능하다.(즉, 객체를 생성하지 않고도 사용할 수 있다.)
        - 객체가 사라져도 멤버는 사라지지 않는다.
        - 멤버는 프로그램이 종료될 때 사라진다.
    3. 공유의 특성
        - 동일한 클래스의 모든 객체들에 의해 공유된다.


       // 대전제1: 정적멤버는 정적멤버답게 사용하라!(타입명.멤버)
       // 대전제2: this 라는 키워드 오로지 인스턴스 메소드안에서만 사용가능!
       // 대전제3: 인스턴스 멤버는 다른 인스턴스 멤버 + 정적멤버까지 모두 사용가능!
       //           정적 멤버는 오로지 다른 정적멤버만 사용가능!!
    */

    // ====================
    //Static 멤버의 사용법
    // ====================
    /*
    ================
    객체.Static 멤버
    ================
    - static 필드는 클래스의 모든 객체에 공통으로 사용되는 변수가 된다.
    - 클래스의 어떤 멤버도 static 멤버에 접근할 수 있다.

    ==================
    클래스.static 멤버
    ==================
    - static 멤버는 클래스당 하나만 있기 때문에 클래스 이름으로 바로 접근할 수 있다.
    - new 에 의해 객체가 생기기 전에 static 멤버에 접근할 수 있다.
    */

    // ===============
    // Static 의 활용
    // ===============
    /*
    ==================================
    전역변수와 전역함수를 만들 때 사용
    ==================================
    1. 캡슐화의 원칙
        - 자바에서는 다른언어들과 달리 어떤 변수나 함수도 클래스 밖에 존재할 수 없으며 클래스의 멤버로 존재하여야 한다.
        - 그러나 응용프로그램 작성시 모든 클래스에서 공유하는 전역변수나 모즌 클래스에서 언제든지 호출할 수 있는 전역함수를 만들어 사용할 필요가 생긴다.
        - static 은 이런 문제의 해결책이다.

    2. 공유 멤버를 만들고자 할 때 활용
        - static 으로 선언된 필드나 메소드는 모두 이 클래스의 각 객체들의 공통 멤버가 되며 객체들 사이에서 공유된다.
    */

    // ==========================
    // Static 메소드의 제약 조건
    // ==========================
    /*
    1. static 메소드는 객체가 생성되지 않은 상황에서도 사용이 가능하므로 객체에 속한 인스턴스 메소드, 인스턴스 변수 등을 사용할 수없다.
        - static 멤버만 사용이 가능하다.
        - 그러나 인스턴스 메소드는 static 멤버들을 모두 사용할 수 있다.

    2. static 메소드에서는 this 키워드를 사용할 수 없다.
        - this 는 호출 당시 실행중인 객체를 가리키는 레퍼런스이다.
        - 따라서 객체가 생성되지 않은 상황에서도 클래스 이름을 이용하여 호출이 가능한 static 메소드는 this 를 사용할 수 없다.
    */


//    class 안 바이트코드들을 객체화시킨 clazz 객체가있어야 new 생성자 가능
//    clazz .class 파일을 로더가 읽는다 -> 메소드영역에 clazz 객체로 넣는다? -> 바이트코드를 보고 new 로 만든다
}
